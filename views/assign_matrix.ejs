<!-- v20240620-multicolumn-grouped (simple, no folding) -->
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Assign Names to Categories</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
  <style>
    body { background: #f8fafc; }
    .main-card {
      max-width: 1200px;
      margin: 40px auto;
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 2px 20px #ececf2;
      padding: 36px 28px 32px 28px;
    }
    .matrix th, .matrix td { text-align: center; vertical-align: middle; }
    .matrix th.rotate {
      height: 120px; white-space: nowrap;
    }
    .matrix th.rotate > div {
      transform: translate(0,40px) rotate(-45deg);
      width: 40px;
    }
    .active-x { background: #cce5ff !important; }
    .matrix th, .matrix td { border: 1px solid #e2e6ea !important; }
    .matrix th { background: #f5f6fa; font-weight: 500; }
    .matrix td { background: #fff; }
    @media (max-width: 1100px) {
      .main-card { padding: 10px 2px; }
      .matrix { font-size: 13px; }
    }
    /* Table scroll */
    .matrix-scroll { overflow-x: auto; }
    .matrix { min-width: 1000px; }
    #assignNotice { transition: opacity 0.35s; }
  </style>
</head>
<body>
  <div class="main-card">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h4 class="fw-bold mb-0">
        Assign Names to Categories <span class="fs-6 text-muted">[“x” Assignment Matrix]</span>
        <span style="font-size:13px; color:#888;">v20240620-multicolumn-grouped</span>
      </h4>
      <a href="/admin/table" class="btn btn-outline-secondary btn-sm">&larr; Back to Data Management</a>
    </div>
    <!-- Feedback notice bar -->
    <div id="assignNotice" class="alert alert-success d-none" style="position:sticky;top:10px;z-index:99;"></div>
    <div class="matrix-scroll">
    <table class="table matrix table-bordered table-hover align-middle">
      <thead>
        <!-- First row: theme -->
        <tr>
          <th rowspan="3" style="min-width:110px;">Name</th>
          <% categoriesGroup.forEach(function(theme, i) { %>
            <th colspan="<%= theme.subthemes.reduce((s,st)=>s+st.categories.length,0) %>">
              <%= theme.theme %>
            </th>
          <% }) %>
        </tr>
        <!-- Second row: subtheme -->
        <tr>
          <% categoriesGroup.forEach(function(theme) {
               theme.subthemes.forEach(function(sub) { %>
            <th colspan="<%= sub.categories.length %>">
              <%= sub.subtheme %>
            </th>
          <% }) }) %>
        </tr>
        <!-- Third row: category -->
        <tr>
          <% categoriesGroup.forEach(function(theme) {
               theme.subthemes.forEach(function(sub) {
                 sub.categories.forEach(function(cat) { %>
            <th>
              <%= cat.category %>
            </th>
          <% }) }) }) %>
        </tr>
      </thead>
      <tbody>
        <% names.forEach(function(name) { %>
          <tr>
            <td><%= name.name_text %></td>
            <% categoriesGroup.forEach(function(theme) {
                 theme.subthemes.forEach(function(sub) {
                   sub.categories.forEach(function(cat) {
                      var checked = ncs.find(nc => nc.name_id === name.id && nc.category_id === cat.id) ? 'checked' : '';
            %>
              <td class="cat-cell <%= checked ? 'active-x' : '' %>">
                <input type="checkbox"
                  data-nameid="<%= name.id %>"
                  data-catid="<%= cat.id %>"
                  <%= checked %>
                  onchange="toggleAssign(this)">
              </td>
            <% }) }) }) %>
          </tr>
        <% }) %>
      </tbody>
    </table>
    </div>
    <div class="alert alert-info mt-4" style="max-width:650px;">
      <b>Tip:</b> Check/uncheck boxes to assign/remove “x” (changes are automatically saved to the database).
    </div>
  </div>
  <script>
    // Feedback bar function
    function showNotice(msg, type='success') {
      const bar = document.getElementById('assignNotice');
      bar.className = 'alert alert-' + type;
      bar.innerText = msg;
      bar.classList.remove('d-none');
      bar.style.opacity = 1;
      setTimeout(() => {
        bar.style.opacity = 0;
        setTimeout(() => { bar.classList.add('d-none'); }, 400);
      }, 1400);
    }

    // Assign/remove relationship with feedback
    function toggleAssign(cb) {
      const name_id = cb.dataset.nameid;
      const category_id = cb.dataset.catid;
      fetch('/admin/assign-x', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({
          name_id: name_id,
          category_id: category_id,
          action: cb.checked ? 'add' : 'remove'
        })
      }).then(resp => resp.json()).then(json => {
        if (json.success) {
          cb.parentNode.classList.toggle('active-x', cb.checked);
          showNotice(cb.checked ? 'Assigned successfully!' : 'Assignment removed.', 'success');
        } else {
          alert(json.message || 'Update failed');
          cb.checked = !cb.checked;
          showNotice('Update failed!', 'danger');
        }
      });
    }
  </script>
</body>
</html>
