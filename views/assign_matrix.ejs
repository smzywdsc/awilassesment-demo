<!-- v20240620-multicolumn-grouped -->
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Assign Names to Categories</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
  <style>
    table.matrix th, table.matrix td { text-align: center; vertical-align: middle; }
    table.matrix th.rotate {
      height: 120px; white-space: nowrap;
    }
    table.matrix th.rotate > div {
      transform: translate(0,40px) rotate(-45deg);
      width: 40px;
    }
    td.active-x { background: #cce5ff !important; }
    .folded { display: none !important; }
    .theme-link, .subtheme-link { cursor: pointer; color: #0d6efd; text-decoration: underline; }
  </style>
</head>
<body>
  <div class="container mt-4">
    <h3>Assign Names to Categories (“x” Assignment Matrix) <span style="font-size:14px; color:#666;">[v20240620-multicolumn-grouped]</span></h3>
    <a href="/admin/table">← Back to Data Management</a>
    <table class="table table-bordered matrix">
      <thead>
        <!-- First row: theme -->
        <tr>
          <th rowspan="3">Name</th>
          <% categoriesGroup.forEach(function(theme, i) { %>
            <th colspan="<%= theme.subthemes.reduce((s,st)=>s+st.categories.length,0) %>" key="theme-<%=i%>">
              <span class="theme-link" data-theme="<%= theme.theme %>"><%= theme.theme %></span>
            </th>
          <% }) %>
        </tr>
        <!-- Second row: subtheme -->
        <tr>
          <% categoriesGroup.forEach(function(theme) {
               theme.subthemes.forEach(function(sub, j) { %>
            <th colspan="<%= sub.categories.length %>"
                class="subtheme-header"
                data-theme="<%= theme.theme %>"
                data-subtheme="<%= sub.subtheme %>"
                key="subtheme-<%= theme.theme %>-<%=j%>">
              <span class="subtheme-link"
                    data-theme="<%= theme.theme %>"
                    data-subtheme="<%= sub.subtheme %>"><%= sub.subtheme %></span>
            </th>
          <% }) }) %>
        </tr>
        <!-- Third row: category -->
        <tr>
          <% categoriesGroup.forEach(function(theme) {
               theme.subthemes.forEach(function(sub) {
                 sub.categories.forEach(function(cat, k) { %>
            <th class="cat-header"
                data-theme="<%= theme.theme %>"
                data-subtheme="<%= sub.subtheme %>"
                data-cat="<%= cat.category %>"
                key="cat-<%=cat.id%>">
              <%= cat.category %>
            </th>
          <% }) }) }) %>
        </tr>
      </thead>
      <tbody>
        <% names.forEach(function(name) { %>
          <tr>
            <td><%= name.name_text %></td>
            <% categoriesGroup.forEach(function(theme) {
                 theme.subthemes.forEach(function(sub) {
                   sub.categories.forEach(function(cat) {
                      var checked = ncs.find(nc => nc.name_id === name.id && nc.category_id === cat.id) ? 'checked' : '';
            %>
              <td class="cat-cell <%= checked ? 'active-x' : '' %>"
                  data-theme="<%= theme.theme %>"
                  data-subtheme="<%= sub.subtheme %>"
                  data-cat="<%= cat.category %>">
                <input type="checkbox"
                  data-nameid="<%= name.id %>"
                  data-catid="<%= cat.id %>"
                  <%= checked %>
                  onchange="toggleAssign(this)">
              </td>
            <% }) }) }) %>
          </tr>
        <% }) %>
      </tbody>
    </table>
    <div>
      <b>Tip:</b> Click the theme/subtheme name to fold/unfold columns. <br>
      Check/uncheck boxes to assign/remove “x” (changes are automatically saved to the database).
    </div>
  </div>
  <script>
    // Assign/remove relationship
    function toggleAssign(cb) {
      const name_id = cb.dataset.nameid;
      const category_id = cb.dataset.catid;
      fetch('/admin/assign-x', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({
          name_id: name_id,
          category_id: category_id,
          action: cb.checked ? 'add' : 'remove'
        })
      }).then(resp => resp.json()).then(json => {
        if (json.success) {
          cb.parentNode.classList.toggle('active-x', cb.checked);
        } else {
          alert(json.message || 'Update failed');
          cb.checked = !cb.checked;
        }
      });
    }

    // Theme and subtheme folding
    document.addEventListener("DOMContentLoaded", function() {
      document.querySelectorAll('.theme-link').forEach(a => {
        a.addEventListener('click', function(){
          const theme = this.dataset.theme;
          document.querySelectorAll(`.subtheme-header[data-theme='${theme}'],
                                    .cat-header[data-theme='${theme}'],
                                    .cat-cell[data-theme='${theme}']`)
            .forEach(el => el.classList.toggle('folded'));
        });
      });
      document.querySelectorAll('.subtheme-link').forEach(a => {
        a.addEventListener('click', function(){
          const theme = this.dataset.theme, subtheme = this.dataset.subtheme;
          document.querySelectorAll(`.cat-header[data-theme='${theme}'][data-subtheme='${subtheme}'],
                                    .cat-cell[data-theme='${theme}'][data-subtheme='${subtheme}']`)
            .forEach(el => el.classList.toggle('folded'));
        });
      });
    });
  </script>
</body>
</html>
