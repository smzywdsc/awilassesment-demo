<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Database Management Table</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
  <style>
    body { background: #f8fafc; }
    .main-card { max-width: 1200px; margin: 36px auto; background: #fff; border-radius: 12px; box-shadow: 0 2px 18px #e7e7ea; padding: 32px 30px 30px 30px;}
    .table thead th { background: #f3f6fa; font-weight: bold; }
    .table-striped>tbody>tr:nth-of-type(odd) { background: #f9fbfd; }
    .table-scroll { overflow-x: auto; }
    .action-btns { margin-bottom: 16px;}
    .col-toggle label { margin-right: 16px; font-weight: normal;}
    .search-bar { width:200px; margin-left:auto; }
    .modal-backdrop {background:rgba(0,0,0,0.14);}
    .modal-content {border-radius:10px;}
    .btn-xs { padding:2px 9px; font-size:0.92rem;}
    .active-x { background: #cce5ff !important; }
    .matrix th, .matrix td { text-align: center; vertical-align: middle; min-width:44px;}
    .matrix th { border: 1px solid #e2e6ea !important; background: #f5f6fa; font-weight: 500;}
    .matrix td { border: 1px solid #e2e6ea !important; background: #fff;}
    .matrix-scroll { overflow-x: auto; }
    .matrix { min-width: 1000px; }
    #assignNotice { transition: opacity 0.35s; }
    #nameFilterInput { max-width: 120px; margin-bottom: 2px; padding: 2px 8px; font-size: 15px;}
    .delete-btn { min-width: 70px; }
  </style>
</head>
<body>
  <div class="container main-card">
    <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">
      <h3 class="fw-bold mb-0">Database Management Table</h3>
      <div>
        <button class="btn btn-primary btn-sm" onclick="showAddForm('theme')">Add Theme</button>
        <button class="btn btn-primary btn-sm" onclick="showAddForm('subtheme')">Add Subtheme</button>
        <button class="btn btn-primary btn-sm" onclick="showAddForm('category')">Add Category</button>
        <button class="btn btn-primary btn-sm" onclick="showAddForm('name')">Add Name</button>
        <a href="/admin/chart" class="btn btn-outline-success btn-sm ms-2">Go to Data Visualization</a>
        <a href="/admin/logout" class="btn btn-outline-danger btn-sm ms-2">Logout</a>
      </div>
    </div>
    <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
      <div class="form-check col-toggle ms-1">
        <input class="form-check-input" type="checkbox" data-theme-toggle="name" id="colName" checked>
        <label class="form-check-label" for="colName">Name</label>
      </div>
      <% categoriesGroup.forEach(function(theme, tIdx) { %>
        <div class="form-check col-toggle">
          <input class="form-check-input" type="checkbox" data-theme-toggle="<%= theme.theme %>" id="toggle-<%= theme.theme %>" checked>
          <label class="form-check-label" for="toggle-<%= theme.theme %>"><%= theme.theme %></label>
        </div>
      <% }) %>
      <input type="text" id="nameFilterInput" class="form-control form-control-sm search-bar ms-3" placeholder="Filter Name...">
    </div>
    <div id="assignNotice" class="alert alert-success d-none" style="position:sticky;top:10px;z-index:99;"></div>
    <div class="matrix-scroll">
    <table class="table matrix table-bordered table-hover align-middle" id="matrixTable">
      <thead>
        <!-- First row: Theme -->
        <tr>
          <th rowspan="3" class="th-name" data-theme-col="name" style="min-width:160px;">Name</th>
          <% categoriesGroup.forEach(function(theme) { %>
            <th class="th-theme" data-theme-col="<%= theme.theme %>" colspan="<%= theme.subthemes.reduce((s,st)=>s+st.categories.length,0) %>"><%= theme.theme %></th>
          <% }) %>
        </tr>
        <!-- Second row: Subtheme -->
        <tr>
          <% categoriesGroup.forEach(function(theme) {
               theme.subthemes.forEach(function(sub) { %>
            <th class="th-subtheme" data-theme-col="<%= theme.theme %>" colspan="<%= sub.categories.length %>"><%= sub.subtheme %></th>
          <% }) }) %>
        </tr>
        <!-- Third row: Category -->
        <tr>
          <% categoriesGroup.forEach(function(theme) {
               theme.subthemes.forEach(function(sub) {
                 sub.categories.forEach(function(cat) { %>
            <th class="th-cat" data-theme-col="<%= theme.theme %>"><%= cat.category %></th>
          <% }) }) }) %>
        </tr>
      </thead>
      <tbody>
        <% names.forEach(function(name) { %>
          <tr>
            <td class="td-name" data-theme-col="name">
              <button class="btn btn-danger btn-xs me-1 delete-btn" onclick="deleteName('<%= name.name_text %>')">Delete</button>
              <span class="name-text"><%= name.name_text %></span>
            </td>
            <% categoriesGroup.forEach(function(theme) {
                 theme.subthemes.forEach(function(sub) {
                   sub.categories.forEach(function(cat) {
                      var checked = ncs.find(nc => nc.name_id === name.id && nc.category_id === cat.id) ? 'checked' : '';
            %>
              <td class="cat-cell td-theme" data-theme-col="<%= theme.theme %>">
                <input type="checkbox"
                  data-nameid="<%= name.id %>"
                  data-catid="<%= cat.id %>"
                  <%= checked %>
                  onchange="toggleAssign(this)">
              </td>
            <% }) }) }) %>
          </tr>
        <% }) %>
      </tbody>
    </table>
    </div>
    <!-- Add Form Modal -->
    <div class="modal" tabindex="-1" id="addFormModal">
      <div class="modal-dialog">
        <div class="modal-content p-3">
          <h4 id="addFormTitle" class="mb-3">Add</h4>
          <form id="addForm" onsubmit="return submitAddForm()">
            <div id="addFormFields"></div>
            <div class="mt-3">
              <button type="submit" class="btn btn-primary btn-xs me-2">Save</button>
              <button type="button" class="btn btn-secondary btn-xs" onclick="closeAddForm()">Cancel</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
<script>
  //Toggle function for the subject column, supports merging multiple layers of headers and hiding them together
  document.querySelectorAll('.col-toggle input[type=checkbox][data-theme-toggle]').forEach(function(checkbox) {
    checkbox.addEventListener('change', function() {
      var theme = this.dataset.themeToggle;
      var checked = this.checked;
      document.querySelectorAll('[data-theme-col="'+theme+'"]').forEach(function(el){
        el.style.display = checked ? '' : 'none';
      });
    });
  });

  // Name search/filter
  document.getElementById('nameFilterInput').addEventListener('input', function() {
    const val = this.value.trim().toLowerCase();
    document.querySelectorAll('#matrixTable tbody tr').forEach(tr => {
      const nameCell = tr.querySelector('span.name-text');
      if (!val || (nameCell && nameCell.textContent.toLowerCase().includes(val))) {
        tr.style.display = '';
      } else {
        tr.style.display = 'none';
      }
    });
  });

  function showAddForm(type) {
    document.getElementById('addFormModal').style.display = 'block';
    document.getElementById('addFormTitle').innerText = 'Add ' + type.charAt(0).toUpperCase() + type.slice(1);
    var fieldsHtml = '';
    if (type === 'theme') {
      fieldsHtml += '<label>Theme Name:<input name="theme" class="form-control" required></label>';
    }
    if (type === 'subtheme') {
      fieldsHtml += '<label>Subtheme Name:<input name="subtheme" class="form-control" required></label>';
      fieldsHtml += '<label>Theme (parent):<input name="theme" class="form-control" required></label>';
    }
    if (type === 'category') {
      fieldsHtml += '<label>Category Name:<input name="category" class="form-control" required></label>';
      fieldsHtml += '<label>Subtheme (parent):<input name="subtheme" class="form-control" required></label>';
    }
    if (type === 'name') {
      fieldsHtml += '<label>Name:<input name="name" class="form-control" required></label>';
    }
    document.getElementById('addFormFields').innerHTML = fieldsHtml;
    document.getElementById('addForm').dataset.type = type;
    document.getElementById('addFormModal').classList.add('show');
    document.getElementById('addFormModal').style.display = 'block';
  }
  function closeAddForm() {
    document.getElementById('addFormModal').classList.remove('show');
    document.getElementById('addFormModal').style.display = 'none';
  }
  function submitAddForm() {
    var type = document.getElementById('addForm').dataset.type;
    var form = document.getElementById('addForm');
    var formData = {};
    Array.from(form.elements).forEach(function(el) {
      if (el.name) formData[el.name] = el.value;
    });
    fetch('/admin/add', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ type: type, data: formData })
    }).then(resp => resp.json())
      .then(json => {
        if (json.success) location.reload();
        else alert(json.message || 'Failed');
      });
    return false;
  }
  function showNotice(msg, type='success') {
    const bar = document.getElementById('assignNotice');
    bar.className = 'alert alert-' + type;
    bar.innerText = msg;
    bar.classList.remove('d-none');
    bar.style.opacity = 1;
    setTimeout(() => {
      bar.style.opacity = 0;
      setTimeout(() => { bar.classList.add('d-none'); }, 400);
    }, 1400);
  }
  function toggleAssign(cb) {
    const name_id = cb.dataset.nameid;
    const category_id = cb.dataset.catid;
    fetch('/admin/assign-x', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify({
        name_id: name_id,
        category_id: category_id,
        action: cb.checked ? 'add' : 'remove'
      })
    }).then(resp => resp.json()).then(json => {
      if (json.success) {
        cb.parentNode.classList.toggle('active-x', cb.checked);
        showNotice(cb.checked ? 'Assigned successfully!' : 'Assignment removed.', 'success');
      } else {
        alert(json.message || 'Update failed');
        cb.checked = !cb.checked;
        showNotice('Update failed!', 'danger');
      }
    });
  }
  function deleteName(name) {
    if (!confirm('Delete this name and all its assignments?')) return;
    fetch('/admin/delete-name', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name })
    }).then(resp => resp.json())
      .then(json => {
        if (json.success) location.reload();
        else alert(json.message || 'Delete failed!');
      });
  }
</script>
</body>
</html>
